// Code generated by goctl. DO NOT EDIT.

package gamemodel

import (
	"context"
	"strings"
	"time"
	"chenxi/pkg/dao/mysql"
	"chenxi/pkg/model"

	"gorm.io/gorm"
)

type (
	sysMenuModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *SysMenu) error

		FindOne(ctx context.Context, id uint64) (*SysMenu, error)
		Update(ctx context.Context, tx *gorm.DB, data *SysMenu) error

		Delete(ctx context.Context, tx *gorm.DB, id uint64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
		Sharding(Sharding model.ISharding) *defaultSysMenuModel
		Builder(tx *gorm.DB) *gorm.DB
	}

	defaultSysMenuModel struct {
		conn     *gorm.DB
		table    string
		sharding model.ISharding
	}

	SysMenu struct {
		Id          uint64         `gorm:"column:id"`
		Pid         uint64         `gorm:"column:pid"`          // 父级id
		Type        uint64         `gorm:"column:type"`         // 类型 1=目录 2=菜单 2=按钮
		Path        string         `gorm:"column:path"`         // 路由路径
		Name        string         `gorm:"column:name"`         // 路由名称
		Redirect    string         `gorm:"column:redirect"`     // 跳转地址
		Perms       string         `gorm:"column:perms"`        // 权限地址
		Component   string         `gorm:"column:component"`    // 组件路径
		Icon        string         `gorm:"column:icon"`         // 图标
		Title       string         `gorm:"column:title"`        // 菜单名称
		Link        string         `gorm:"column:link"`         // 外链地址
		IsAffix     uint64         `gorm:"column:is_affix"`     // 是否固定页签 1=是 0=否
		IsHide      uint64         `gorm:"column:is_hide"`      // 是否隐藏 1=是 0=否
		IsFull      uint64         `gorm:"column:is_full"`      // 是否全屏 1=是 0=否
		IsKeepalive uint64         `gorm:"column:is_keepalive"` // 是否缓存 1=是 0=否
		Sort        int64          `gorm:"column:sort"`
		CreatedAt   time.Time      `gorm:"column:created_at"`
		UpdatedAt   time.Time      `gorm:"column:updated_at"`
		DeletedAt   gorm.DeletedAt `gorm:"column:deleted_at;index"`
	}
)

func (SysMenu) TableName() string {
	return "`sys_menu`"
}

func newSysMenuModel(conn *gorm.DB) *defaultSysMenuModel {
	return &defaultSysMenuModel{
		conn:  conn,
		table: "`sys_menu`",
	}
}

func (m *defaultSysMenuModel) Sharding(sharding model.ISharding) *defaultSysMenuModel {
	m.sharding = sharding
	return m
}

func (m *defaultSysMenuModel) Builder(tx *gorm.DB) *gorm.DB {
	return m.scopes(tx).Model(&SysMenu{})
}

func (m *defaultSysMenuModel) scopes(tx *gorm.DB) *gorm.DB {
	var db = m.conn
	if tx != nil {
		db = tx
	}
	if m.sharding == nil {
		return db
	}
	return db.Scopes(func(d *gorm.DB) *gorm.DB {
		return d.Table(strings.Trim(m.table, "`") + "_" + m.sharding.GetTableSuffix())
	})
}

func (m *defaultSysMenuModel) Insert(ctx context.Context, tx *gorm.DB, data *SysMenu) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultSysMenuModel) FindOne(ctx context.Context, id uint64) (*SysMenu, error) {
	var resp SysMenu
	err := m.scopes(nil).WithContext(ctx).Model(&SysMenu{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case mysql.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) Update(ctx context.Context, tx *gorm.DB, data *SysMenu) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultSysMenuModel) Delete(ctx context.Context, tx *gorm.DB, id uint64) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Delete(&SysMenu{}, id).Error

	return err
}

func (m *defaultSysMenuModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.scopes(nil).WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		var db = m.scopes(tx)
		return fn(db)
	})
}
