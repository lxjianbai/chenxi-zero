// Code generated by goctl. DO NOT EDIT.

package cloudmodel

import (
	"context"
	"database/sql"
	"strings"
	"chenxi/pkg/dao/mysql"
	"chenxi/pkg/model"

	"gorm.io/gorm"
)

type (
	yangSeizeBabyConfigModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyConfig) error

		FindOne(ctx context.Context, id uint64) (*YangSeizeBabyConfig, error)
		Update(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyConfig) error

		Delete(ctx context.Context, tx *gorm.DB, id uint64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
		Sharding(Sharding model.ISharding) *defaultYangSeizeBabyConfigModel
		Builder(tx *gorm.DB) *gorm.DB
	}

	defaultYangSeizeBabyConfigModel struct {
		conn     *gorm.DB
		table    string
		sharding model.ISharding
	}

	YangSeizeBabyConfig struct {
		Id        uint64         `gorm:"column:id"`         // 自增id
		Key       sql.NullString `gorm:"column:key"`        // key
		Value     sql.NullString `gorm:"column:value"`      // value
		Describe  sql.NullString `gorm:"column:describe"`   // 描述
		CreatedAt sql.NullTime   `gorm:"column:created_at"` // 添加时间
		UpdatedAt sql.NullTime   `gorm:"column:updated_at"` // 更新时间
		Status    sql.NullInt64  `gorm:"column:status"`     // 状态:1=启用,0禁用
	}
)

func (YangSeizeBabyConfig) TableName() string {
	return "`yang_seize_baby_config`"
}

func newYangSeizeBabyConfigModel(conn *gorm.DB) *defaultYangSeizeBabyConfigModel {
	return &defaultYangSeizeBabyConfigModel{
		conn:  conn,
		table: "`yang_seize_baby_config`",
	}
}

func (m *defaultYangSeizeBabyConfigModel) Sharding(sharding model.ISharding) *defaultYangSeizeBabyConfigModel {
	m.sharding = sharding
	return m
}

func (m *defaultYangSeizeBabyConfigModel) Builder(tx *gorm.DB) *gorm.DB {
	return m.scopes(tx).Model(&YangSeizeBabyConfig{})
}

func (m *defaultYangSeizeBabyConfigModel) scopes(tx *gorm.DB) *gorm.DB {
	var db = m.conn
	if tx != nil {
		db = tx
	}
	if m.sharding == nil {
		return db
	}
	return db.Scopes(func(d *gorm.DB) *gorm.DB {
		return d.Table(strings.Trim(m.table, "`") + "_" + m.sharding.GetTableSuffix())
	})
}

func (m *defaultYangSeizeBabyConfigModel) Insert(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyConfig) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultYangSeizeBabyConfigModel) FindOne(ctx context.Context, id uint64) (*YangSeizeBabyConfig, error) {
	var resp YangSeizeBabyConfig
	err := m.scopes(nil).WithContext(ctx).Model(&YangSeizeBabyConfig{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case mysql.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultYangSeizeBabyConfigModel) Update(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyConfig) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultYangSeizeBabyConfigModel) Delete(ctx context.Context, tx *gorm.DB, id uint64) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Delete(&YangSeizeBabyConfig{}, id).Error

	return err
}

func (m *defaultYangSeizeBabyConfigModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.scopes(nil).WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		var db = m.scopes(tx)
		return fn(db)
	})
}
