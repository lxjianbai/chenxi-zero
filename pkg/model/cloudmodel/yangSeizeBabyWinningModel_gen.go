// Code generated by goctl. DO NOT EDIT.

package cloudmodel

import (
	"context"
	"database/sql"
	"strings"
	"chenxi/pkg/dao/mysql"
	"chenxi/pkg/model"

	"gorm.io/gorm"
)

type (
	yangSeizeBabyWinningModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyWinning) error

		FindOne(ctx context.Context, id uint64) (*YangSeizeBabyWinning, error)

		Update(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyWinning) error

		Delete(ctx context.Context, tx *gorm.DB, id uint64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
		Sharding(Sharding model.ISharding) *defaultYangSeizeBabyWinningModel
		Builder(tx *gorm.DB) *gorm.DB
	}

	defaultYangSeizeBabyWinningModel struct {
		conn     *gorm.DB
		table    string
		sharding model.ISharding
	}

	YangSeizeBabyWinning struct {
		Id          uint64          `gorm:"column:id"`           // id
		MemberId    sql.NullInt64   `gorm:"column:member_id"`    // 用户id
		StageNumId  sql.NullInt64   `gorm:"column:stage_num_id"` // 期数id
		WinningNum  sql.NullInt64   `gorm:"column:winning_num"`  // 中奖号码
		PrizeDes    sql.NullString  `gorm:"column:prize_des"`    // 奖品描述
		PrizeStatus sql.NullInt64   `gorm:"column:prize_status"` // 奖品的状态:1=未发放,2=已发放
		CreatedAt   sql.NullTime    `gorm:"column:created_at"`   // 生成时间
		UpdatedAt   sql.NullTime    `gorm:"column:updated_at"`   // 更新时间
		PrizeNum    sql.NullFloat64 `gorm:"column:prize_num"`    // 奖品数量
	}
)

func (YangSeizeBabyWinning) TableName() string {
	return "`yang_seize_baby_winning`"
}

func newYangSeizeBabyWinningModel(conn *gorm.DB) *defaultYangSeizeBabyWinningModel {
	return &defaultYangSeizeBabyWinningModel{
		conn:  conn,
		table: "`yang_seize_baby_winning`",
	}
}

func (m *defaultYangSeizeBabyWinningModel) Sharding(sharding model.ISharding) *defaultYangSeizeBabyWinningModel {
	m.sharding = sharding
	return m
}

func (m *defaultYangSeizeBabyWinningModel) Builder(tx *gorm.DB) *gorm.DB {
	return m.scopes(tx).Model(&YangSeizeBabyWinning{})
}

func (m *defaultYangSeizeBabyWinningModel) scopes(tx *gorm.DB) *gorm.DB {
	var db = m.conn
	if tx != nil {
		db = tx
	}
	if m.sharding == nil {
		return db
	}
	return db.Scopes(func(d *gorm.DB) *gorm.DB {
		return d.Table(strings.Trim(m.table, "`") + "_" + m.sharding.GetTableSuffix())
	})
}

func (m *defaultYangSeizeBabyWinningModel) Insert(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyWinning) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultYangSeizeBabyWinningModel) FindOne(ctx context.Context, id uint64) (*YangSeizeBabyWinning, error) {
	var resp YangSeizeBabyWinning
	err := m.scopes(nil).WithContext(ctx).Model(&YangSeizeBabyWinning{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case mysql.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultYangSeizeBabyWinningModel) Update(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyWinning) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultYangSeizeBabyWinningModel) Delete(ctx context.Context, tx *gorm.DB, id uint64) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Delete(&YangSeizeBabyWinning{}, id).Error

	return err
}

func (m *defaultYangSeizeBabyWinningModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.scopes(nil).WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		var db = m.scopes(tx)
		return fn(db)
	})
}
