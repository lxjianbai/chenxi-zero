// Code generated by goctl. DO NOT EDIT.

package cloudmodel

import (
	"context"
	"database/sql"
	"strings"
	"chenxi/pkg/dao/mysql"
	"chenxi/pkg/model"

	"gorm.io/gorm"
)

type (
	yangSeizeBabyGoodsModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyGoods) error

		FindOne(ctx context.Context, id uint64) (*YangSeizeBabyGoods, error)
		Update(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyGoods) error

		Delete(ctx context.Context, tx *gorm.DB, id uint64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
		Sharding(Sharding model.ISharding) *defaultYangSeizeBabyGoodsModel
		Builder(tx *gorm.DB) *gorm.DB
	}

	defaultYangSeizeBabyGoodsModel struct {
		conn     *gorm.DB
		table    string
		sharding model.ISharding
	}

	YangSeizeBabyGoods struct {
		Id          uint64          `gorm:"column:id"`           // id
		GoodsName   sql.NullString  `gorm:"column:goods_name"`   // 商品的名字
		GoodsPrice  sql.NullFloat64 `gorm:"column:goods_price"`  // 商品的价格
		Goodsimage  sql.NullString  `gorm:"column:goodsimage"`   // 商品图片
		CreatedAt   sql.NullTime    `gorm:"column:created_at"`   // 商品添加时间
		UpdatedAt   sql.NullTime    `gorm:"column:updated_at"`   // 商品更新时间
		GoodsStatus sql.NullInt64   `gorm:"column:goods_status"` // 商品的状态:1=上架,2=下架
		GoodsType   sql.NullInt64   `gorm:"column:goods_type"`   // 商品的类型:1=云豆夺宝,2=实物夺宝
	}
)

func (YangSeizeBabyGoods) TableName() string {
	return "`yang_seize_baby_goods`"
}

func newYangSeizeBabyGoodsModel(conn *gorm.DB) *defaultYangSeizeBabyGoodsModel {
	return &defaultYangSeizeBabyGoodsModel{
		conn:  conn,
		table: "`yang_seize_baby_goods`",
	}
}

func (m *defaultYangSeizeBabyGoodsModel) Sharding(sharding model.ISharding) *defaultYangSeizeBabyGoodsModel {
	m.sharding = sharding
	return m
}

func (m *defaultYangSeizeBabyGoodsModel) Builder(tx *gorm.DB) *gorm.DB {
	return m.scopes(tx).Model(&YangSeizeBabyGoods{})
}

func (m *defaultYangSeizeBabyGoodsModel) scopes(tx *gorm.DB) *gorm.DB {
	var db = m.conn
	if tx != nil {
		db = tx
	}
	if m.sharding == nil {
		return db
	}
	return db.Scopes(func(d *gorm.DB) *gorm.DB {
		return d.Table(strings.Trim(m.table, "`") + "_" + m.sharding.GetTableSuffix())
	})
}

func (m *defaultYangSeizeBabyGoodsModel) Insert(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyGoods) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultYangSeizeBabyGoodsModel) FindOne(ctx context.Context, id uint64) (*YangSeizeBabyGoods, error) {
	var resp YangSeizeBabyGoods
	err := m.scopes(nil).WithContext(ctx).Model(&YangSeizeBabyGoods{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case mysql.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultYangSeizeBabyGoodsModel) Update(ctx context.Context, tx *gorm.DB, data *YangSeizeBabyGoods) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultYangSeizeBabyGoodsModel) Delete(ctx context.Context, tx *gorm.DB, id uint64) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Delete(&YangSeizeBabyGoods{}, id).Error

	return err
}

func (m *defaultYangSeizeBabyGoodsModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.scopes(nil).WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		var db = m.scopes(tx)
		return fn(db)
	})
}
