// Code generated by goctl. DO NOT EDIT.

package cloudmodel

import (
	"context"
	"strings"
	"time"
	"chenxi/pkg/dao/mysql"
	"chenxi/pkg/model"

	"gorm.io/gorm"
)

type (
	yangUserLevelModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *YangUserLevel) error

		FindOne(ctx context.Context, id uint64) (*YangUserLevel, error)
		Update(ctx context.Context, tx *gorm.DB, data *YangUserLevel) error

		Delete(ctx context.Context, tx *gorm.DB, id uint64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
		Sharding(Sharding model.ISharding) *defaultYangUserLevelModel
		Builder(tx *gorm.DB) *gorm.DB
	}

	defaultYangUserLevelModel struct {
		conn     *gorm.DB
		table    string
		sharding model.ISharding
	}

	YangUserLevel struct {
		Id         uint64    `gorm:"column:id"`
		UserId     uint64    `gorm:"column:user_id"` // 客户id
		Pid        uint64    `gorm:"column:pid"`     // 父级(列出所有的父级id)
		Level      uint64    `gorm:"column:level"`   // 相对于父级的等级
		CreateTime time.Time `gorm:"column:create_time"`
	}
)

func (YangUserLevel) TableName() string {
	return "`yang_user_level`"
}

func newYangUserLevelModel(conn *gorm.DB) *defaultYangUserLevelModel {
	return &defaultYangUserLevelModel{
		conn:  conn,
		table: "`yang_user_level`",
	}
}

func (m *defaultYangUserLevelModel) Sharding(sharding model.ISharding) *defaultYangUserLevelModel {
	m.sharding = sharding
	return m
}

func (m *defaultYangUserLevelModel) Builder(tx *gorm.DB) *gorm.DB {
	return m.scopes(tx).Model(&YangUserLevel{})
}

func (m *defaultYangUserLevelModel) scopes(tx *gorm.DB) *gorm.DB {
	var db = m.conn
	if tx != nil {
		db = tx
	}
	if m.sharding == nil {
		return db
	}
	return db.Scopes(func(d *gorm.DB) *gorm.DB {
		return d.Table(strings.Trim(m.table, "`") + "_" + m.sharding.GetTableSuffix())
	})
}

func (m *defaultYangUserLevelModel) Insert(ctx context.Context, tx *gorm.DB, data *YangUserLevel) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultYangUserLevelModel) FindOne(ctx context.Context, id uint64) (*YangUserLevel, error) {
	var resp YangUserLevel
	err := m.scopes(nil).WithContext(ctx).Model(&YangUserLevel{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case mysql.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultYangUserLevelModel) Update(ctx context.Context, tx *gorm.DB, data *YangUserLevel) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultYangUserLevelModel) Delete(ctx context.Context, tx *gorm.DB, id uint64) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Delete(&YangUserLevel{}, id).Error

	return err
}

func (m *defaultYangUserLevelModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.scopes(nil).WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		var db = m.scopes(tx)
		return fn(db)
	})
}
