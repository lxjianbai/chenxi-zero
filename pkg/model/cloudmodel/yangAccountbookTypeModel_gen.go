// Code generated by goctl. DO NOT EDIT.

package cloudmodel

import (
	"context"
	"strings"
	"chenxi/pkg/dao/mysql"
	"chenxi/pkg/model"

	"gorm.io/gorm"
)

type (
	yangAccountbookTypeModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *YangAccountbookType) error

		FindOne(ctx context.Context, id int64) (*YangAccountbookType, error)
		Update(ctx context.Context, tx *gorm.DB, data *YangAccountbookType) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
		Sharding(Sharding model.ISharding) *defaultYangAccountbookTypeModel
		Builder(tx *gorm.DB) *gorm.DB
	}

	defaultYangAccountbookTypeModel struct {
		conn     *gorm.DB
		table    string
		sharding model.ISharding
	}

	YangAccountbookType struct {
		Id           int64  `gorm:"column:id"`
		Name         string `gorm:"column:name"`          // 中文备注
		LanguagePack string `gorm:"column:language_pack"` // 语言包
	}
)

func (YangAccountbookType) TableName() string {
	return "`yang_accountbook_type`"
}

func newYangAccountbookTypeModel(conn *gorm.DB) *defaultYangAccountbookTypeModel {
	return &defaultYangAccountbookTypeModel{
		conn:  conn,
		table: "`yang_accountbook_type`",
	}
}

func (m *defaultYangAccountbookTypeModel) Sharding(sharding model.ISharding) *defaultYangAccountbookTypeModel {
	m.sharding = sharding
	return m
}

func (m *defaultYangAccountbookTypeModel) Builder(tx *gorm.DB) *gorm.DB {
	return m.scopes(tx).Model(&YangAccountbookType{})
}

func (m *defaultYangAccountbookTypeModel) scopes(tx *gorm.DB) *gorm.DB {
	var db = m.conn
	if tx != nil {
		db = tx
	}
	if m.sharding == nil {
		return db
	}
	return db.Scopes(func(d *gorm.DB) *gorm.DB {
		return d.Table(strings.Trim(m.table, "`") + "_" + m.sharding.GetTableSuffix())
	})
}

func (m *defaultYangAccountbookTypeModel) Insert(ctx context.Context, tx *gorm.DB, data *YangAccountbookType) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultYangAccountbookTypeModel) FindOne(ctx context.Context, id int64) (*YangAccountbookType, error) {
	var resp YangAccountbookType
	err := m.scopes(nil).WithContext(ctx).Model(&YangAccountbookType{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case mysql.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultYangAccountbookTypeModel) Update(ctx context.Context, tx *gorm.DB, data *YangAccountbookType) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultYangAccountbookTypeModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Delete(&YangAccountbookType{}, id).Error

	return err
}

func (m *defaultYangAccountbookTypeModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.scopes(nil).WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		var db = m.scopes(tx)
		return fn(db)
	})
}
