// Code generated by goctl. DO NOT EDIT.

package cloudmodel

import (
	"context"
	"database/sql"
	"strings"
	"chenxi/pkg/dao/mysql"
	"chenxi/pkg/model"

	"gorm.io/gorm"
)

type (
	yangUsersModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *YangUsers) error

		FindOne(ctx context.Context, id uint64) (*YangUsers, error)

		Update(ctx context.Context, tx *gorm.DB, data *YangUsers) error

		Delete(ctx context.Context, tx *gorm.DB, id uint64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
		Sharding(Sharding model.ISharding) *defaultYangUsersModel
		Builder(tx *gorm.DB) *gorm.DB
	}

	defaultYangUsersModel struct {
		conn     *gorm.DB
		table    string
		sharding model.ISharding
	}

	YangUsers struct {
		Id                    uint64         `gorm:"column:id"` // user id.
		Name                  sql.NullString `gorm:"column:name"`
		Email                 sql.NullString `gorm:"column:email"`    // user email
		Phone                 sql.NullString `gorm:"column:phone"`    // user phone member.
		Avatar                sql.NullString `gorm:"column:avatar"`   // 用户头像
		Location              sql.NullString `gorm:"column:location"` // 用户位置
		Password              sql.NullString `gorm:"column:password"` // password.
		Bio                   string         `gorm:"column:bio"`      // 用户简介
		Sex                   int64          `gorm:"column:sex"`      // 用户性别，1男  2女  0保密
		CreateTime            int64          `gorm:"column:create_time"`
		UpdateTime            int64          `gorm:"column:update_time"`
		PayPassword           sql.NullString `gorm:"column:pay_password"`           // 支付密码
		LastTime              int64          `gorm:"column:last_time"`              // 最后登录时间
		Ip                    sql.NullString `gorm:"column:ip"`                     // IP
		Version               sql.NullString `gorm:"column:version"`                // 版本
		RobotStatus           int64          `gorm:"column:robot_status"`           // 状态机器人，1
		VipGrade              int64          `gorm:"column:vip_grade"`              // 用户VIP等级
		IsDelete              uint64         `gorm:"column:is_delete"`              // 是否删除：0=正常用户，1=删除用户
		DisableLoginTime      int64          `gorm:"column:disable_login_time"`     // 禁用登录到期时间戳
		LockMark              sql.NullString `gorm:"column:lock_mark"`              // 禁用备注
		IsCertification       int64          `gorm:"column:is_certification"`       // 实名认证：0=未实名，1实名
		ShareCertification    int64          `gorm:"column:share_certification"`    // 分享认证：0=未认证，1=认证
		SenioCertification    int64          `gorm:"column:senio_certification"`    // 高级会员认证：0=未认证，1=认证
		TopCertification      int64          `gorm:"column:top_certification"`      // 顶级认证：0=未认证，1=认证
		OperatorCertification int64          `gorm:"column:operator_certification"` // 运营商认证，1.县级  2.市级 3.省级
		DisableOtcTime        int64          `gorm:"column:disable_otc_time"`       // 禁用otc到期时间戳
		DisableOtcMark        sql.NullString `gorm:"column:disable_otc_mark"`       // 禁用OTC备注
		IsUpgradePwd          uint64         `gorm:"column:is_upgrade_pwd"`         // 是否更新密码
		IsActive              int64          `gorm:"column:is_active"`              // 是否为有效会员,0=无效，1=有效
		UserType              int64          `gorm:"column:user_type"`              // 用户类型，0.正常注册  1.快速注册
		ManualUpdate          uint64         `gorm:"column:manual_update"`          // 是否手动更新等级:1是，2否
		UserMark              uint64         `gorm:"column:user_mark"`              // 身份标识：0普通用户1联创2市场部，关联mark表
		Openid                sql.NullString `gorm:"column:openid"`                 // openid
		Unionid               sql.NullString `gorm:"column:unionid"`                // unionid
		AlipayUserid          sql.NullString `gorm:"column:alipay_userid"`          // 支付宝用户ID
		DeleteMark            sql.NullString `gorm:"column:delete_mark"`            // 禁用备注
		StudioId              uint64         `gorm:"column:studio_id"`              // 工作室列表id
		StudioEditNum         int64          `gorm:"column:studio_edit_num"`        // 服务中心工作室修改次数
		DymOpenid             sql.NullString `gorm:"column:dym_openid"`             // 通过本表的id使用md5加密生成的参数
		IsClear               int64          `gorm:"column:is_clear"`               // 是否清理过，1清理过0没清理
		CertificationTime     int64          `gorm:"column:certification_time"`     // 实名认证时间
		ClearMark             sql.NullString `gorm:"column:clear_mark"`             // 15天未登录清理备注
		IsShow                int64          `gorm:"column:is_show"`                // 是否显示：1：是，0：否
		GoodNumber            sql.NullString `gorm:"column:good_number"`            // 靓号
	}
)

func (YangUsers) TableName() string {
	return "`yang_users`"
}

func newYangUsersModel(conn *gorm.DB) *defaultYangUsersModel {
	return &defaultYangUsersModel{
		conn:  conn,
		table: "`yang_users`",
	}
}

func (m *defaultYangUsersModel) Sharding(sharding model.ISharding) *defaultYangUsersModel {
	m.sharding = sharding
	return m
}

func (m *defaultYangUsersModel) Builder(tx *gorm.DB) *gorm.DB {
	return m.scopes(tx).Model(&YangUsers{})
}

func (m *defaultYangUsersModel) scopes(tx *gorm.DB) *gorm.DB {
	var db = m.conn
	if tx != nil {
		db = tx
	}
	if m.sharding == nil {
		return db
	}
	return db.Scopes(func(d *gorm.DB) *gorm.DB {
		return d.Table(strings.Trim(m.table, "`") + "_" + m.sharding.GetTableSuffix())
	})
}

func (m *defaultYangUsersModel) Insert(ctx context.Context, tx *gorm.DB, data *YangUsers) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(&data).Error
	return err
}

func (m *defaultYangUsersModel) FindOne(ctx context.Context, id uint64) (*YangUsers, error) {
	var resp YangUsers
	err := m.scopes(nil).WithContext(ctx).Model(&YangUsers{}).Where("`id` = ?", id).Take(&resp).Error
	switch err {
	case nil:
		return &resp, nil
	case mysql.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultYangUsersModel) Update(ctx context.Context, tx *gorm.DB, data *YangUsers) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Save(data).Error
	return err
}

func (m *defaultYangUsersModel) Delete(ctx context.Context, tx *gorm.DB, id uint64) error {
	db := m.scopes(tx)
	err := db.WithContext(ctx).Delete(&YangUsers{}, id).Error

	return err
}

func (m *defaultYangUsersModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.scopes(nil).WithContext(ctx).Transaction(func(tx *gorm.DB) error {
		var db = m.scopes(tx)
		return fn(db)
	})
}
